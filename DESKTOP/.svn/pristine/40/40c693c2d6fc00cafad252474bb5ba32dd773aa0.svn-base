/*
 * cartier.boutique.js
 * This file contains functionalities handling the Storelocator and Boutique Pages
 *
 * @project   Cartier Desktop
 * @date      2014-01-03
 * @author    Sapient
 * @licensor  Cartier Desktop
 * @site      Cartier Desktop
   @dependency cartier.core.js
 * @ NOTE:
    This file has the following sequence of the actions
    1) Declare all the private variables
    2) caching jquery wrapper objects and messages
    $last) call to init() method
 */


;
(function(win, $, boutique, undefined) {
	//this will cause the browser to check for errors more aggressively
	'use strict';

	//check if Jquery is defined, else return
	if (typeof $ === 'undefined') {
		console.log('jQuery not found');
		return false;
	}

	/*
    private variables
    */

	var
	_cache = {},
		_templates,
		_productPerPage,
		_objPropertiesMsg,
		_objPropertiesPth,
		_isDesktopFullView = false,



		//--------------------------------------------------------------------------------------------------------
		//         Caching jQuery object
		//--------------------------------------------------------------------------------------------------------

		/*
          @private method : caching jquery objects
          @param : none
        */
		_cacheObjects = function() {

			_cache = {
				$boutique: $('.js-boutique'),
				$accordionObject: $('.js-accordion'),
				$storeObject: $('.store-locator-wrapper'),
				$storeSearchWrapper: $('.store-search-wrapper'),
				$storeList: $('.js-store-list'),
				$filterButton: $('.js-filter-button'),
				$boutiqueUl: $('.js-boutique-list'),
				$retailerUl: $('.js-retailer-list'),
				$countrySelect: $('.js-country'),
				$countryDetail: $('.js-country-detail'),
				$viewMoreLink: $('.js-view-button'),
				$listOfproducts: $('.js-retailer-list li'),
				$filterUl: $('.js-filter-list'),
				$filterCheckbox: $('.js-filter-checkbox'),
				$storeDetail: $('.js-store-detail'),
				$findStoreDetail: $('.js-store-list').find('.js-store-detail'),
				$GeolocateButton: $('.js-geolocateButton'),
				$searchButton: $('.change-loc__search .js-search-but-1'),
				$searchButton1: $('.js-search-but-1'),
				$searchButton2: $('.js-search-but-2'),
				$searchBox: $('.store-locater__search input'),
				$searchBox1: $('#js-search-box-1'),
				$searchBox2: $('#js-search-box-2'),
				$errorMsgClass1: $('.js-store-locator_error-msg-1'),
				$errorMsgClass2: $('.js-store-locator_error-msg-2'),
				$errorMsgClass3: $('.js-store-locator_error-msg-3'),
				$suggestionErrorClass: $('.js-store-locater__error-suggest'),
				$suggestionErrorClassAnchor: $('.js-store-locater__error-suggest li a'),
				$textForNear: $('.js-store-list').data('near'),
				$textForIn: $('.js-store-list').data('in'),
				errorMsgClass1: 'js-store-locator_error-msg-1',
				errorMsgClass2: 'js-store-locator_error-msg-2',
				errorMsgClass3: 'js-store-locator_error-msg-3',
				suggestionErrorClass: 'js-store-locater__error-suggest',
				$geolocateError: $('.js-geolocate-error'),
				$retailerListVisibleLi: $('.js-retailer-list li:visible'),
				$boutiqueListVisibleLi: $('.js-boutique-list li:visible'),
				$bridalContactWrapper: $('.contact-bridal'),
				$contactWrapper: $('.contact__contact-cont'),
				$desktopBoutiqueListWrapper: $('.boutique-list-wrapper'),
				$desktopBoutiqueListWrapperFullView: $('.boutique-list-wrapper.boutique-map'),
				$desktopBoutiqueListDetail: $('.boutique-list-detail-wrapper'),
				$favoriteBoutiqueModal: $('.js-modal-overlay.add_to_favorites'),
				$favoriteBoutiqueModalTrigger: $('.social-share__favorite.js-modaltrigger'),
				$loadingindicator: $('.loadingindicator'),
				$contactAmbButton: $('.js-contact-cont-amb-but'),
				$contactAmbPagePath: $('.js-contact-cont-amb-but').attr('href'),
				$sendEmailButton: $('.js-send-email-but'),
				$sendEmailButtonPath: $('.js-send-email-but').attr('href'),
				$askAppointmentButton: $('.js-ask-appointment-button'),
				$askAppointmentButtonPath: $('.js-ask-appointment-button').attr('href'),
				$askAppointmentContactButton: $('#navigationBlock_4'),
				$askAppointmentContactButtonPath: $('#navigationBlock_4').attr('href'),
				$boutiqueDetailPage: $('.js-boutique-detail-page'),
				$socialShareAnchorA: $('.anchor-set-a'),
				$socialShareAnchorB: $('.anchor-set-b'),
				$favBoutiqueBox: $('.js-fav-boutique')


			};

		},

		//--------------------------------------------------------------------------------------------------------
		//          EVENT Bindings
		//--------------------------------------------------------------------------------------------------------

		/*
          @private method : bind events
          @param : none
        */
		_bindEvents = function() {

			_cache.$countrySelect.on('change', _countryajaxCallHandler);

			_cache.$filterButton.on('click', _refineFilterHandler);

			_cache.$storeList.find('a').on('click', _ChangeLocButtonHandler);

			_cache.$GeolocateButton.on('click', _geolocationHandler);

			_cache.$searchButton.on('click', function(e) {
				_searchButtonHandler(e);
			});

			//For Enter Key binding for Search boxes
			_cache.$searchBox.on('enterKey', function(e) {
				_searchButtonHandler(e);
			});

			_cache.$searchBox.keyup(function(e) {
				if (e.keyCode == 13) {
					$(this).trigger('enterKey');
				}
			});

			_cache.$suggestionErrorClassAnchor.on('click', _suggestionAjaxCaller);

			$('.js-boutique-detail-page').find('#submitAdd').on('click', function(event) {
				event.preventDefault();
				_addBoutiqueToWishlistHandler();
			});

			if(_cache.$favBoutiqueBox.length > 0){
				_cache.$favBoutiqueBox.find('.cross-button').on('click',function(e){
					e.preventDefault();
					_deleteFavouriteBoutique($(this));
				});
			}
		},


		//--------------------------------------------------------------------------------------------------------
		//          EVENT HANDLERS
		//--------------------------------------------------------------------------------------------------------

		/*
          @private method : View More selection function
          @param : none
        */
		_viewMoreSelection = function() {
			_productPerPage = 2;
			cartier.common.viewMoreSelection(_productPerPage, _cache.$viewMoreLink, $('.js-store-list .js-store-detail'));
		},

		/*
          @private method : View More Callback function
          @param : none
        */

		_viewMoreCallback = function() {
			if (!$('.js-retailer-list li:visible').length) {
				_cache.$retailerUl.find('.js-heading3').hide();
			} else
				_cache.$retailerUl.find('.js-heading3').show();
		},

		/*
          @private method : View More Main function
          @param : none
        */
		_viewMore = function() {
			$.when(_viewMoreSelection()).done(_viewMoreCallback);
		},


		/*
          @private method : Click handler for click on the Filter button of the Expandable Store Filter
          @param : none
        */
		_storeFilterSubmitHandler = function(p) {
			cartier.log($(this).closest('fieldset').find('.js-inputfield'));
			$(this)
				.closest('fieldset')
				.find('.js-inputfield')
				.val('')
				.trigger('change');
			_cache.$accordionObject.data('plugin_makeAccordion')._closeHandler(p);
		},

		/*
          @private method :Change Location Button Handler
          @param : none
        */
		_ChangeLocButtonHandler = function() {
			_cache.$storeList.find('.js-change-loc').hide();
			_cache.$storeList.find('.js-change-loc_search').show();
		},



		//--------------------------------------------------------------------------------------------------------
		//          Initialize Plugins
		//--------------------------------------------------------------------------------------------------------
		/*
          @private method : initialize Accordion of Store Locator page
          @param : none
        */

		_initializeAccordion = function() {
			_cache.$accordionObject.makeAccordion({
				showBehaviour: true
			});
		},


		/*
          @private method : initialize storelocator of Store Locator page
          @param : none
        */

		_initializeStoreLocator = function() {
			_cache.$storeObject.storelocator({
				errorMsgClass2: _cache.errorMsgClass2,
				errorMsgClass3: _cache.errorMsgClass3,
				suggestionErrorClass: _cache.suggestionErrorClass,
				textForNear: _cache.$textForNear,
				textForIn: _cache.$textForIn
			});
		},


		/*
          @private method : initialize Autocomplete instances of Search Box inputs for  Store Locator page
          @param : none
        */

		_initializeAutocomplete = function() {
			/* Autocomplete Stuff */
			var autocomplete1, autocomplete2,

				_geocodeCallback = function() {
					var geoSenderFunc = _cache.$storeObject.data('plugin_storelocator')._geocodeSender();
					_setGeoUrl(geoSenderFunc);
				},
				_geoCityCallback = function(geoCity) {
					_cache.$storeList.find('.js-GeoCity').html(geoCity);
				};

			// Fallback for bounds if not able to find bounds
			var defaultBounds = new google.maps.LatLngBounds(
				new google.maps.LatLng(-33.8902, 151.1759),
				new google.maps.LatLng(-33.8474, 151.2631));

			//First Search box
			var firstSearchInput = document.getElementById('js-search-box-1');
			//Second Search box inside Boutique list
			var secondSearchInput = document.getElementById('js-search-box-2');



			var options = {
				bounds: defaultBounds,
				types: ['geocode']
			};

			//Adding Autocomplete on the input box with option fields

			//Autocomplete for the First input box
			autocomplete1 = new google.maps.places.Autocomplete(firstSearchInput, options);
			//Autocomplete for the Second (inside boutique list)input box changes
			autocomplete2 = new google.maps.places.Autocomplete(secondSearchInput, options);

			//Listener to call geocodeIt whenever the First input box changes
			google.maps.event.addListener(autocomplete1, 'place_changed', function() {
				_cache.$storeObject.data('plugin_storelocator')
					._geocodeMe(autocomplete1, null, _geocodeCallback, _geoCityCallback, false);
				_cache.$searchBox2.val(_cache.$searchBox1.val());
			});
			//Listener to call geocodeIt whenever the Second (inside boutique list)input box changes
			google.maps.event.addListener(autocomplete2, 'place_changed', function() {
				_cache.$storeObject.data('plugin_storelocator')
					._geocodeMe(autocomplete2, null, _geocodeCallback, _geoCityCallback, false);
				_cache.$searchBox2.val(_cache.$searchBox2.val());
			});


		},



		//--------------------------------------------------------------------------------------------------------
		//         Other Business Logic Functions
		//--------------------------------------------------------------------------------------------------------

		/*
          @private method : send ajax call, appends the data to the description
          @param : none
        */
		_countryajaxCallHandler = function() {
			var countrySelect = $('.js-country option:selected').attr('value');
			//console.log(countrySelect);
			_cache.$countryDetail.find('.contact__service-cont__timimgs').addLoaderPrepend();
			var objXHR = cartier.ajaxWrapper.getXhrObj({
				type: 'GET',
				url: '/bin/richemont/private/contact.' + countrySelect + '.' + lang + '.json',
				dataType: 'json',
				cache: true

			});

			if (objXHR) {
				objXHR.done(function(data) {
					// handle failure
					if (typeof data.success !== 'undefined' && !data.success) {
						// handle redirectURL exist if the session expires
						// data.redirectURL ?  win.location.href = data.redirectURL : $form.find('.server_message').html(data.errorMessage);
					} else {

						var parsedData = cartier.common.cartierJSONparser({
							json: data
						});

						if (parsedData !== false) {
							_cache.$countryDetail.find('.contact__service-cont__number').attr('src', 'tel:' + data.content.phone);
							_cache.$countryDetail.find('.js-phone').html(data.content.phone);
							_cache.$countryDetail.find('.js-weekdays').html(data.content.openingTime);
							_cache.$countryDetail.find('.js-address').html(data.content.address);
							_cache.$bridalContactWrapper.find('.js-bridal-phone').html(data.content.phoneBridal);
							_cache.$bridalContactWrapper.find('.js-bridal-schedule').html(data.content.scheduleBridal);
							_cache.$bridalContactWrapper.find('.js-bridal-address').html(data.content.addressBridal);
							_cache.$bridalContactWrapper.find('.js-bridal-countryname').html(data.content.countryName);

							if (data.content.phone === '') {
								_cache.$countryDetail.find('.contact__service-cont__number').addClass('display-none');
							} else
								_cache.$countryDetail.find('.contact__service-cont__number').removeClass('display-none');

							if (data.content.phoneBridal === '') {
								_cache.$bridalContactWrapper.find('.telephone').addClass('display-none');
							} else
								_cache.$bridalContactWrapper.find('.telephone').removeClass('display-none');

							if (data.content.phoneBridal === '' && data.content.scheduleBridal === '' && data.content.addressBridal === '') {
								_cache.$contactWrapper.find('.contact-bridal').removeClass('display-block').addClass('display-none');
								_cache.$contactWrapper.find('.js-country-detail').removeClass('contact-relation');
							} else {

								_cache.$contactWrapper.find('.contact-bridal').removeClass('display-none').addClass('display-block');
								_cache.$contactWrapper.find('.js-country-detail').addClass('contact-relation');
							}
						}
					}
				});
			}

			_cache.$countryDetail.find('.contact__service-cont__timimgs').removeLoader();
		},



		/*
          @private method : Geolocation Button Handler to Geocoder service with User's current address as input
          @param : none
        */
		_geolocationHandler = function() {

			var geocoder = new google.maps.Geocoder(),
				lat, lng, latlng, Geolat, Geolng;

			var _geocodeCallback = function() {
				var geoSenderFunc = _cache.$storeObject.data('plugin_storelocator')._geocodeSender();
				_setGeoUrl(geoSenderFunc);
			},
				_geoCityCallback = function(geoCity) {
					_cache.$storeList.find('.js-GeoCity').html(geoCity);
				};

			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(function(position) {
					Geolat = position.coords.latitude;
					Geolng = position.coords.longitude;
					lat = parseFloat(Geolat);
					lng = parseFloat(Geolng);
					latlng = new google.maps.LatLng(lat, lng);
					geocoder.geocode({
						'latLng': latlng
					}, function(results, status) {
						if (status === google.maps.GeocoderStatus.OK) {
							if (results[1]) {
								_cache.$storeObject.data('plugin_storelocator')
									._geocodeMe(null, results[1].formatted_address, _geocodeCallback, _geoCityCallback, false);
							}
						} else {
							console.log('Geocoder for GeoLocateMe failed due to: ' + status);
						}
					});
				}, function(error) {
					_cache.$geolocateError.css('display', 'block');

				});

			} // End of If ( navigator.geolocation ) clause

		},


		/*
          @private method : Search Button Handler to call Geocoder service and Ajax call
          @param : none
        */

		_searchButtonHandler = function(eventTriggered) {
			var _geocodeCallback = function() {
				var geoSenderFunc = _cache.$storeObject.data('plugin_storelocator')._geocodeSender();
				_setGeoUrl(geoSenderFunc);
			},
				_geoCityCallback = function(geoCity) {
					_cache.$storeList.find('.js-GeoCity').html(geoCity);
				};

			if (eventTriggered.target.className === 'cta cta--red js-search-but-1' || eventTriggered.target.className === 'form-input js-search-box-1' || eventTriggered.currentTarget.classList[0] === 'js-search-but-1') {
				_cacheObjects();
				if ($('#js-search-box-1').val() !== '') {
					$('.js-store-locator_error-msg-1').hide();
					_cache.$storeObject.data('plugin_storelocator')
						._geocodeMe(_cache.$searchBox1.val(), null, _geocodeCallback, _geoCityCallback, false);
					_cache.$searchBox2.val(_cache.$searchBox1.val());

				} else {
					_cache.$errorMsgClass1.show();
					_cache.$errorMsgClass2.hide();
					_cache.$errorMsgClass3.hide();
					_cache.$suggestionErrorClass.hide();

				}

			}
			if (eventTriggered.target.className === 'cta cta--red js-search-but-2' || eventTriggered.target.className === 'form-input js-search-box-2' || eventTriggered.currentTarget.classList[0] === 'js-search-but-2') {
				if ($('#js-search-box-2').val() !== '') {
					$('.js-store-locator_error-msg-1').hide();
					_cache.$storeObject.data('plugin_storelocator')
						._geocodeMe(_cache.$searchBox2.val(), null, _geocodeCallback, _geoCityCallback, false);
					_cache.$searchBox2.val(_cache.$searchBox2.val());

				} else {
					_cache.$errorMsgClass1.show();
					_cache.$errorMsgClass2.hide();
					_cache.$errorMsgClass3.hide();
					_cache.$suggestionErrorClass.hide();
				}

			}

		},


		/*
          @private method : send ajax call, appends the data to the All the Stores on the basis on Search Query or Geolocation
          @param : GUrl is the url that needs to be send in the ajax call
        */

		_storelocatorAjaxCallHandler = function(GUrl) {

			_cache.$boutiqueUl.addLoaderPrepend();
			_cache.$boutiqueUl.removeLoader();

			/* REAL Ajax caller : This is temp code need to be UNCOMMENTED WHEN INTEGRATING */
			

            var baseUrl = storelocator.pagePath + '/jcr:content.json';
            var objXHR = cartier.ajaxWrapper.getXhrObj({
                type: 'GET',
                url: baseUrl + GUrl,
                dataType: 'json',

            });

			/* DUMMY Ajax caller : This is temp code need to be REMOVED  */


/*			var objXHR = cartier.ajaxWrapper.getXhrObj({
				type: 'GET',
				url: _objPropertiesPth.storeListJson + '/GUrl',
				dataType: 'json'
			});

*/

			if (objXHR) {
				objXHR.done(function(data) {
					// handle failure
					if (typeof data.success !== 'undefined' && !data.success) {
						// handle redirectURL exist if the session expires
						//data.redirectURL ?  win.location.href = data.redirectURL : $form.find('.server_message').html(data.errorMessage);
					} else {

						var parsedData = cartier.common.cartierJSONparser({
							json: data
						});

						if (parsedData !== false) {
							// Each time We Search a Preloader is added before The Boutique List <UL>
							//_cache.$boutiqueUl.addLoaderPrepend();
							// Each time We Search The filter Button is unbinded temporarily
							_cache.$filterButton.unbind('click');
							// Each time We Search The Change location button is unbinded temporarily
							_cache.$storeList.unbind('click');

							// Each time We Search a new location,
							// we will Remove All the Store Blocks ( <li class='store-detail'>) from previous Search
							_cache.$storeObject.find('.js-store-detail').remove();
							// With Each New Search, To Hide the No result block
							_cache.$storeObject.find('.js-no-result-msg').hide();
							_cache.$desktopBoutiqueListWrapperFullView.find('.js-no-result-msg').hide();


							// If the JSON Object for searched stores is empty, then jump out of the function
							if (data.content.length === 0) {
								// To Show the NO RESULTS MSG
								_cache.$desktopBoutiqueListWrapperFullView.find('.js-no-result-msg').show();
								_cache.$storeObject.find('.js-no-result-msg').show();

								_cache.$boutiqueUl.removeLoader();
								// To Hide the 'Authorizied Retailer' heading
								_cache.$retailerUl.find('.heading3').hide();
								return (null); // Jump out of the function

							}

							var boutiqueLi = '', // To store boutique entries to append later in Li
								retailerLi = '', // To store Retailer entries to append later in Li
								tCount = 0; // To store total count of stores

							// Show more count is the count that author sets for the number of stores
							// that will be shown with SHOW-MORE/LOAD MORE IS CLICKED
							var showMoreCount = _cache.$storeList.data('show-more-count');

							// To find how many stores are to be displayed, this comes from the JSON object (data.content)
							tCount = data.content.length;

							// To supply FMT Based text for read more and Show Map
							var readmore = _cache.$boutiqueUl.data('readmore');
							var showmap = _cache.$boutiqueUl.data('showmap');

							// To supply a default store image is The Store result JSON does not have store image
							var defaultStoreImage = _cache.$boutiqueUl.data('default-store-image');

							// To Disable all Filter checkboxes at the first ajax run
							_cache.$filterUl.find('.js-filter-checkbox').attr('disabled', true);


							// For loop to iterate thru the Total Store count, tCount
							for (var i = 0; i < tCount; i++) {
								// To supply FMT Based text for read more and Show Map to each store entry
								data.content[i].readmore = readmore;
								data.content[i].showmap = showmap;
								// here we add Default Store img to data content if  that store' imgsrc is missing
								if (!data.content[i].imgsrc)
									data.content[i].imgsrc = defaultStoreImage;

								// If the Type of store is boutique then append Each of these types of stores into the Boutique Li unit
								if (data.content[i].typeofstore === 'Boutique') {

									if (i < showMoreCount) {
										boutiqueLi +=
											cartier.template.BoutiqueTemplateFiller(_templates.boutique, data.content[i]);
									} else {
										boutiqueLi +=
											cartier.template.BoutiqueTemplateFiller(_templates.boutiqueHidden, data.content[i]);
									}

								}
								// Else the Type of store is Retailer, then append Each of these types of stores into the Retailer Li
								else {
									if (i < showMoreCount) {
										retailerLi +=
											cartier.template.RetailerTemplateFiller(_templates.retailer, data.content[i]);
									} else {
										retailerLi +=
											cartier.template.RetailerTemplateFiller(_templates.retailerHidden, data.content[i]);
									}
								}
								var jsonTagArray = data.content[i].tags.split(' ');
								$.each(jsonTagArray, function(i) {
									_cache.$filterUl.find('.js-filter-checkbox[value=' + jsonTagArray[i] + ']').removeAttr('disabled');
								});

							} // END For Loop

							_cache.$boutiqueUl.append(boutiqueLi);
							_cache.$retailerUl.append(retailerLi);

							// call show more function
							_viewMore();
							// Now if all the Retainers entries are empty, then Hide heading 'Authorized Retailers'
							if (!_cache.$retailerUl.children().length) {
								_cache.$retailerUl.find('.js-heading3').hide();
							} else
								_cache.$retailerUl.find('.js-heading3').show();

							// Now if Total Store count is less than Show more count then HIDE SHOW MORE BUTTON
							if (tCount > showMoreCount) {
								_cache.$viewMoreLink.show();
							} else
								_cache.$viewMoreLink.hide();


							// Rebind events on Filter Button
							_cache.$filterButton.on('click', _refineFilterHandler);
							// Rebind Change button Link
							_cache.$storeList.find('a').on('click', _ChangeLocButtonHandler);
							// Remove PreLoader

						}
						if (_cache.$boutiqueUl.data('scrollPane') === true || _cache.$boutiqueUl.data('scrollPane') == 'true') {
							$('.scrollable').jScrollPane({
								showArrows: true
							});
						}
						_cache.$boutiqueUl.removeLoader();
						if (_isDesktopFullView) {
							_adjustMarkerSize();
						}
					}
				});
			}

		}, //_storelocatorAjaxCallHandler ENDS Here

		/*
          @private method : Function to adjust Marker Size
          @param : 
        */
		_adjustMarkerSize = function() {
			var $collection = $('.more-link a.show-map'),
				len = $('.more-link a.show-map').length;
			if (len > 99) {
				while (len > 100) {
					len--;
					$($collection[len]).css('font-size', '11px;');
				}
			}

		},
		/*
          @private method : send ajax call, appends the data to the All the Stores on the basis on country selection
          @param : GUrl is the url that needs to be send in the ajax call
        */

		_storeListByCountryHandler = function(GUrl) {
			var storesLi = '', // To store entries to append later in Li
				tCount = 0, // To store total count of stores
				$noResultMessageContainer = _cache.$desktopBoutiqueListWrapper.find('.js-no-result-msg');



			/* REAL Ajax caller : This is temp code need to be UNCOMMENTED WHEN INTEGRATING */

			
            var baseUrl = storelocator.pagePath + '/jcr:content.json';
            var objXHR = cartier.ajaxWrapper.getXhrObj({
                type: 'GET',
                url: baseUrl + GUrl,
                dataType: 'json',

            });


			/* DUMMY Ajax caller : This is temp code need to be REMOVED  */

/*
			var objXHR = cartier.ajaxWrapper.getXhrObj({
				type: 'GET',
				url: _objPropertiesPth.storeListJson,
				dataType: 'json'
			});

*/
			if (objXHR) {
				objXHR.done(function(data) {
					// handle failure
					if (typeof data.success !== 'undefined' && !data.success) {
						// handle redirectURL exist if the session expires
						//data.redirectURL ?  win.location.href = data.redirectURL : $form.find('.server_message').html(data.errorMessage);
					} else {

						var parsedData = cartier.common.cartierJSONparser({
							json: data
						});

						if (parsedData !== false) {

							$noResultMessageContainer.hide();

							// If the JSON Object for searched stores is empty, then jump out of the function
							tCount = data.content.length;
							if (tCount === 0) {
								// To Show the NO RESULTS MSG
								$noResultMessageContainer.show();

								_cache.$loadingindicator.hide();
								// To Hide the 'Authorizied Retailer' heading
								return (null); // Jump out of the function
							}


							// To find how many stores are to be displayed, this comes from the JSON object (data.content)

							// To supply FMT Based text for read more
							var readmore = _cache.$boutiqueUl.data('readmore');

							// To supply a default store image is The Store result JSON does not have store image
							var defaultStoreImage = _cache.$boutiqueUl.data('default-store-image');

							// For loop to iterate thru the Total Store count, tCount

							while (tCount--) {
								if (data.content[tCount].typeofstore === 'Boutique') {
									// To supply FMT Based text for read more and Show Map to each store entry
									data.content[tCount].readmore = readmore;
									// here we add Default Store img to data content if  that store' imgsrc is missing
									if (!data.content[tCount].imgsrc) {
										data.content[tCount].imgsrc = defaultStoreImage;
									}
									storesLi += cartier.template.genericTemplateFiller(cartier.template.type.RetailerListTemplate, data.content[tCount]);
								}
							} // END For Loop

							_cache.$boutiqueUl.append(storesLi);
						}
						$('.scrollable').jScrollPane({
							showArrows: true
						});
						_cache.$boutiqueUl.removeLoader();
					}
				});
			}

		}, //_storeListByCountryHandler ENDS Here

		/*
          @private method : show - hide Store containers <li class='js-store-detail'> on the basis on selected Filter
          @param : none
        */

		_refineFilterHandler = function() {
			_cache.$boutiqueUl.addLoaderPrepend();

			_storeFilterSubmitHandler(_cache.$filterButton);
			// Show more count is the count that author sets for the number of stores
			// that will be shown with SHOW-MORE/LOAD MORE IS CLICKED
			var showMoreCount = _cache.$storeList.data('show-more-count');

			_cache.$filterUl.find('.js-filter-checkbox').removeAttr('disabled');
			_cache.$storeObject.find('.js-no-result-msg').hide();
			_cache.$storeObject.find('.js-view-button').show();

			// ChecedTags will become a string with all the selected filters like,
			// If checked filters are A, B,C, and D , then ChecedTags = 'A.B.C.D'
			var checkedTags =
				_cache.$storeObject.find('input:checkbox:checked.js-filter-checkbox')
				.map(function() {
					return this.value;
				})
				.get().join('.');

			var tagsToDisplay,
				checkBoxesToEnable = '';

			_cache.$viewMoreLink.unbind('click');
			// If the No checkbox are selected, then jump out of the function
			if (!checkedTags.length) {
				_cache.$storeObject.find('.js-store-detail').removeClass('js-no-display');
				cartier.common.viewMoreSelection(_productPerPage, _cache.$viewMoreLink, $('.js-store-list .js-store-detail'));
				_showHideFix(null);


				tagsToDisplay = _cache.$storeList.find('.js-store-detail:not(.js-hide-content)');
				var rCount = tagsToDisplay.length;
				// Now if Total Store count is less than Show more count then HIDE SHOW MORE BUTTON
				if (rCount > showMoreCount) {
					_cache.$storeList.find('.js-view-button').show();
				} else
					_cache.$storeList.find('.js-view-button').hide();



				_cache.$boutiqueUl.removeLoader();
				return (null);
			}


			// Each time the Filter button is press, hide all stores
			_cache.$storeObject.find('.js-store-detail').addClass('js-no-display');

			// Find all the stores if the checked Filters ==  store's Tags
			tagsToDisplay = _cache.$storeList.find('.' + checkedTags + '');

			// UNHIDE all the stores if the checked Filters ==  store's Tags

			if (tagsToDisplay && tagsToDisplay[0] !== null) {
				//add js-hide content class for first child
				cartier.common.viewMoreSelection(_productPerPage, _cache.$viewMoreLink, tagsToDisplay);
				tagsToDisplay.removeClass('js-no-display');
				// caching the objects
				_cacheObjects();
			} else {
				// In else, that means there is no store with required filters
				// Hence. Show no results message and go out of the function
				_cache.$storeObject.find('.js-no-result-msg').show();
				_cache.$storeObject.find('.js-view-button').hide();
				_cache.$boutiqueUl.removeLoader();
				return (null);
			}
			// Now, Disable all Filter Checkboxes, So that we can enable only the ones preside in remaining stores
			_cache.$filterUl.find('.js-filter-checkbox').attr('disabled', true);

			// Each Loop, To extract filter names from all the remaining stores after the store filter
			$.each(tagsToDisplay, function(i) {
				checkBoxesToEnable = tagsToDisplay[i].className.replace('store-detail', '');
				checkBoxesToEnable = checkBoxesToEnable.replace('js-store-detail', '');
				checkBoxesToEnable += checkBoxesToEnable.replace('js-hide-content', '');
			});
			// To convert checkBoxesToEnable String into an Array
			checkBoxesToEnable = checkBoxesToEnable.match(/([\w-]+)\W/g);

			// Now, Enable the Filter Checkboxes that presides in the remaining stores
			$.each(checkBoxesToEnable, function(i) {
				_cache.$filterUl.find('.js-filter-checkbox[value=' + checkBoxesToEnable[i] + ']').removeAttr('disabled');
			});


			// Now if all the Retailers entries are empty, then Hide heading 'Authorized Retailers'
			if (!_cache.$retailerListVisibleLi.length) {
				_cache.$retailerUl.find('.js-heading3').hide();
			} else
				_cache.$retailerUl.find('.js-heading3').show();


			// Now if all the stores are hidden, then show msg 'No Result Found'
			if (!_cache.$boutiqueListVisibleLi.length && !_cache.$retailerListVisibleLi.length) {
				_cache.$storeObject.find('.js-no-result-msg').show();
				_cache.$storeObject.find('.js-view-button').hide();
			} else {
				_cache.$storeObject.find('.js-no-result-msg').hide();
				_cache.$storeObject.find('.js-view-button').show();
			}

			// Apply ShowHideFix to balance out The number of count of stores that are being displayed at any point of time.
			_showHideFix(tagsToDisplay);
			_cache.$boutiqueUl.removeLoader();


			var displayCount = tagsToDisplay.length;
			// Now if Total Store count is less than Show more count then HIDE SHOW MORE BUTTON
			if (displayCount > showMoreCount) {
				_cache.$storeList.find('.js-view-button').show();
			} else
				_cache.$storeList.find('.js-view-button').hide();
		},

		/*
          @private method : _showHideFix : Show Hide Fix for Adjusting Hidden stores while changing filters and show more
          @param : none
        */
		_showHideFix = function(tagsToDisplay) {

			var k,
				showMoreCount = _cache.$storeList.data('show-more-count');

			if (tagsToDisplay) {
				for (k = 0; k < tagsToDisplay.length; k++) {
					if (k < showMoreCount) {
						$(tagsToDisplay[k]).removeClass('js-hide-content');
					} else {
						$(tagsToDisplay[k]).addClass('js-hide-content');
					}
				}
			}

			if (_cache.$findStoreDetail.hasClass('js-no-display') === false) {
				_cache.$findStoreDetail.addClass('js-hide-content');
				for (k = 0; k < showMoreCount; k++) {
					var liObject = $(_cache.$findStoreDetail[k]);
					liObject.removeClass('js-hide-content');
				}
			}
		},

		/*
          @private method: _setGeoUrl function for setting the Geocoded Url in storelocator.js and then call _storelocatorAjaxCallHandler.it is called in storelocator.js
          @param : GUrl is the url that needs to be send in the ajax call
        */
		_setGeoUrl = function(GUrl) {
			//To call the _storelocatorAjaxCallhandler is the Geocoding is success and the returned GeoUrl isn't empty
			GUrl !== '' && _storelocatorAjaxCallHandler(GUrl);
			//To hide the First Page Search Box
			_cache.$storeSearchWrapper.hide();
			//To show the Store List after The ajax call is successful
			_cache.$storeList.show();
		},

		/*
          @private method: _setGeoUrl function for setting the Geocoded Url in storelocator.js and then call _storelocatorAjaxCallHandler.it is called in storelocator.js
          @param : GUrl is the url that needs to be send in the ajax call
        */
		_suggestionAjaxCaller = function(suggestAddr) {
			_cacheObjects();
			suggestAddr = $(this).text();

			var _geocodeCallback = function() {
				var geoSenderFunc = _cache.$storeObject.data('plugin_storelocator')._geocodeSender();
				_setGeoUrl(geoSenderFunc);
			},
				_geoCityCallback = function(geoCity) {
					_cache.$storeList.find('.js-GeoCity').html(geoCity);
				};

			_cache.$storeObject.data('plugin_storelocator')
				._geocodeMe(suggestAddr, null, _geocodeCallback, _geoCityCallback, true);
			_cache.$searchBox2.val(suggestAddr);


		},

		/*
          @private method : Add to favourite Boutique Callback function
          @param : Response data
        */
		 _addFavBoutiqueFormCallback = function(data) {
			if (typeof data === 'object') {

				var favBoutiquePath = $('.js-boutique-fav-path').val() + '.html';

				$('#modalOverlay').empty();
				$('#modalOverlay').hide();

				if (data.content.isSubmitSuccess) {

					$('body').confirmBox();
					$('body').data('plugin_confirmBox').popupInitialize({
							'title': _objPropertiesMsg.boutiqueFavPopupHeading,
							'message': _objPropertiesMsg.contactAmbassadorPopupText,
							'buttons': {
								'ok': {
									'buttonName': _objPropertiesMsg.okButton,
									'href': '#',
									'class': 'cta-button cta-button__inner cta--red'

								},
								'cancel': {
									'buttonName': _objPropertiesMsg.boutiqueFavPopupHeadingCancelText,
									'href': favBoutiquePath,
									'class': 'cta-button more-button-overlay'
								}

							}
						},
						$('body').data('plugin_confirmBox').confirmHide

					);
					$('.popup-close-button').on('click', function() {
						$('body').data('plugin_confirmBox').confirmHide();
					});



					$($('#confirmButtons button')[1]).on('click', function() {
						location.href = '' + $(this).attr('href') + '';
					});
				}
			}


		},

		_deleteFavouriteBoutique = function(that) {
			var datatosend = that.closest('.js-fav-boutique').data();

			var objXHR = cartier.ajaxWrapper.getXhrObj({
				url: '/cms-base/richemont/form/actionController?actionName=CartierRemoveBoutiqueAction'+'&boutiquePagePath='+ datatosend.boutiquepath+ '&currentPagePath='+ datatosend.path ,
				type : "POST",
				dataType: 'json',
				cache: true
			});

			if (objXHR) {
				objXHR.done(function(data) {
					// handle failure
					if (typeof data.success !== 'undefined' && !data.success) {
						// handle redirectURL exist if the session expires
						// data.redirectURL ?  win.location.href = data.redirectURL : $form.find('.server_message').html(data.errorMessage);
					} else {
                        if(data.content.isSubmitSuccess){
							that.closest('.js-fav-boutique').remove();

                        }
					}
				});
			}

		},

		/*
          @private method : send ajax call, appends the data to the description
          @param : none
        */
		_addBoutiqueToWishlistHandler = function() {
			// var countrySelect = $('.js-country option:selected').attr('value');
			//console.log(countrySelect);
			$('.js-boutique-detail-page').find('#submitAdd').addLoaderPrepend();
			var currentResourcePath = $('.js-boutique-detail-page').find('.js-boutique-page-path').val();

			var objXHR = cartier.ajaxWrapper.getXhrObj({
				type: 'POST',
				url: '/cms-base/richemont/form/actionController?actionName=CartierAddBoutiqueAction&currentPagePath='+currentResourcePath+'',
				dataType: 'json',
				cache: true

			});

			if (objXHR) {
				objXHR.done(function(data) {
					// handle failure
					if (typeof data.success !== 'undefined' && !data.success) {
						// handle redirectURL exist if the session expires
						// data.redirectURL ?  win.location.href = data.redirectURL : $form.find('.server_message').html(data.errorMessage);
					} else {

						var parsedData = cartier.common.cartierJSONparser({
							json: data
						});

						if (parsedData !== false) {
							_addFavBoutiqueFormCallback(data);

						}
					}
				});
			}

			$('.js-boutique-detail-page').find('#submitAdd').removeLoader();
		};

	//--------------------------------------------------------------------------------------------------------
	//          Public functions
	//--------------------------------------------------------------------------------------------------------



	/*
    @pubic method : initailize the module
    */
	boutique.init = function() {
		_objPropertiesPth = cartier.properties.paths;
		_objPropertiesMsg = cartier.properties.messages;
		if (_cache.$filterCheckbox) {
			_cache.$filterCheckbox.removeAttr('disabled');
		}

		// caching the jquery objects
		_cacheObjects();

		_bindEvents();

		_initializeAccordion();

		if (_cache.$GeolocateButton.length) {
			_initializeStoreLocator();
			_initializeAutocomplete();
		}
		// fire Event if we are in Desktop
		if (_cache.$desktopBoutiqueListWrapper.length) {
			if (_cache.$desktopBoutiqueListWrapperFullView.length) {
				_templates = {
					'boutique': cartier.template.type.BoutiqueTemplateDesktop,
					'boutiqueHidden': cartier.template.type.BoutiqueTemplateDesktop,
					'retailer': cartier.template.type.RetailerTemplateDesktop,
					'retailerHidden': cartier.template.type.RetailerTemplateDesktop
				};
				_isDesktopFullView = true;
				_storelocatorAjaxCallHandler();
			} else {
				_storeListByCountryHandler();
			}
		} else {
			_templates = {
				'boutique': cartier.template.type.BoutiqueTemplate,
				'boutiqueHidden': cartier.template.type.BoutiqueTemplateHidden,
				'retailer': cartier.template.type.RetailerTemplate,
				'retailerHidden': cartier.template.type.RetailerTemplateHidden
			};
		}

		if(_cache.$boutiqueDetailPage.length > 0) {
			if(cartier.common.isLoggedIn()) {
				_cache.$socialShareAnchorA.show();
				_cache.$socialShareAnchorB.hide();
			}
			else {
				_cache.$socialShareAnchorA.hide();
				_cache.$socialShareAnchorB.show();
			}
		}
	};

}(window, jQuery, cartier.boutique));
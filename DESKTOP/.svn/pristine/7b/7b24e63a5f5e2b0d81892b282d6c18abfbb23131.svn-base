/*
 * cartier.location.geocodedinput.js
 * This file contains functionalities handling the Storelocator and Boutique Pages
 *
 * @project   Cartier Desktop
 * @date      2014-01-03
 * @author    Sapient 
 * @licensor  cartier Desktop
 * @site      cartier Desktop
   @dependency cartier.core.js, cartier.location.js
 * @ NOTE:
    This file has the following sequence of the actions
    1) Declare all the private variables
    2) caching jquery wrapper objects and messages
    $last) call to init() method
 */
;
(function(win, $, ns, undefined) {
	//this will cause the browser to check for errors more aggressively
	// 'use strict';
	//check if Jquery is defined, else return
	if (typeof $ === 'undefined') {
		console.log('jQuery not found');
		return false;
	};
	cartier.location.geocodedinput = function(element, options, ns, win, $, dataStore, undefined) {
		'use strict';
		var that = this,
			$_elem,
			_element = element,
			_options,
			_cache = {},
			defaults = {},

			/*
          @private method : caching jquery objects 
          @param : none 
        */
			_cacheObjects = function() {
				_cache = {
					$input: $_elem.find('.js-search-box-1'),
					$submit: $_elem.find('.store-locater__find-button a'),
					$geoCity: $('.js-GeoCity'),
					$errorMsgClass1: $_elem.find('.js-store-locator_error-msg-1'),
					$errorMsgClass2: $_elem.find('.js-store-locator_error-msg-2'),
					$textForNear: $_elem.data('near'),
					$textForIn: $_elem.data('in'),
					$standalone: $('.js-geocoder').data('standalone') || false,
					$standaloneTarget: $('.js-boutique-listing-page-path').val() || false,

					initLocation: $_elem.data('location'),

					/*************************************************************
					 *** ECS V3 variables: entrust boutique search tab module ***
					 **************************************************************/
					$ecsBoutiqueBackButton: $('.boutique-search-result .js-backtotext'),
					$ecsBoutiqueSearchLocation: $('.boutique-search .js-location'),
					$ecsBoutiqueSearchResult: $('.boutique-search-result'),
					$ecsBoutiqueSearchBg: $('.boutique-search .boutique-bg'),
					$ecsBoutiqueSearchSeeAll: $('.boutique-search .see-all'),
					$ecsBoutiqueSearchResultLocation: $('.boutique-search-result .js-location .store-locater__search')
					/*************************************************************
					 *** ECS V3 variables: entrust boutique search tab module ***
					 **************************************************************/
				};
			},

			//--------------------------------------------------------------------------------------------------------
			//          EVENT Bindings
			//--------------------------------------------------------------------------------------------------------
			/*
          @private method : bind events
          @param : none
        */
			_bindEvents = function() {
				_cache.$submit.on('click', _searchButtonHandler);
				_cache.$input.on('enterKey', function() {
					_searchButtonHandler();
				});

				_cache.$input.keyup(function(e) {
					if (e.keyCode == 13) {
						$(this).trigger('enterKey');
					}
				});

				/*************************************************************
				 *** ECS V3 search boutique click back button ***
				 **************************************************************/
				_cache.$ecsBoutiqueBackButton.closest('.back-button').click(function(e) {
					_ecsBackToBoutiqueSearch(e);
				});
				/*************************************************************
				 *** ECS V3 search boutique click back button ***
				 **************************************************************/

			},
			/*
          @private method : Geocode Callback Function
          @param : Map center and ZoomLevel
        */
			_geocodeCallback = function(center, zoomLevel) {
				/*************************************************************
				 *** ECS V3 search boutique ***
				 **************************************************************/
				/* these lines checks if map result is visible then sets standalone variable to false */
				if ($_elem.closest('.tab-entrust-boutique').length) {
					if (_cache.$ecsBoutiqueSearchResultLocation.css('display') === 'block') {
						$('.js-geocoder').attr('data-standalone', false);
						_cache.$standalone = false;
					};
				}
				/*************************************************************
				 *** ECS V3 search boutique ***
				 **************************************************************/

				_cache.$errorMsgClass1.hide();
				_cache.$errorMsgClass2.hide();
				if (_cache.$standalone === false) {
					/*************************************************************
					 *** ECS V3 search boutique ***
					 **************************************************************/
					/* to show boutique search result */
					if ($_elem.closest('.tab-entrust-boutique').length) {
						_ecsShowResultBox();
						setTimeout(function() {
							that.publish('mapNewCenter', {
								'center': center,
								'zoomLevel': zoomLevel
							});
						}, 1000);


					} else {
						that.publish('mapNewCenter', {
							'center': center,
							'zoomLevel': zoomLevel
						});
					}
					/*************************************************************
					 *** ECS V3 search boutique ***
					 **************************************************************/

					var geoSenderFunc = $_elem.data('plugin_storelocator')._geocodeSender();

					//_setGeoUrl(geoSenderFunc); // Commenting the initial page load ajaz call based on the query fix. This call will happen based on the map present. || Vaibhav

					if ($_elem.closest('.tab-entrust-boutique').length) {
						google.maps.event.trigger(ns.mapObj, 'resize');
					}
				} else {
					if (_cache.$standaloneTarget !== false) {
						var currentHost = win.location.protocol + '//' + win.location.host;
						win.location = currentHost + _cache.$standaloneTarget + '.html?geoCity=' + encodeURIComponent(_cache.$input.val());

					}
				}
			},

			/*
          @private method : GeoCity Callback Function
          @param : geocity and Original Address
        */
			_geoCityCallback = function(geoCity, originalAddr) {
				_cache.$geoCity.html(geoCity);
				var geoCityAddr = geoCity;
				geoCityAddr = geoCityAddr.replace('in ', '');
				_cache.$input.val(originalAddr);
			},

			/*
          @private method : Search Button Handler Function
          @param : Search Term
        */
			_searchButtonHandler = function(search) {
				var searchTerm = _cache.$input.val();

				searchTerm =
					$('.pac-container .pac-item:first-child')
					.find('.pac-item-query')
					.text() + ' ' + $('.pac-container .pac-item:first-child')
					.find('.pac-item-query + span')
					.text();

				if (typeof(search) === 'string') {
					searchTerm = search;
				}

				if (searchTerm !== '') {
					_cache.$errorMsgClass1.hide();
					_cache.$errorMsgClass2.hide();
				} else {
					_cache.$errorMsgClass1.show();
					_cache.$errorMsgClass2.hide();
					return false;
				}

				if (_cache.$standalone === false) {
					$_elem.data('plugin_storelocator')
						._geocodeMe(searchTerm, null, _geocodeCallback, _geoCityCallback, false);
				} else {
					$_elem.data('plugin_storelocator')
						._geocodeMe(
							searchTerm,
							null,
							function() {

								/*************************************************************
								 *** ECS V3 ECS entrust boutique module start ***
								 **************************************************************/
								/* this < if > condition prevents page refresh in case of ecs module */
								if ($_elem.closest('.tab-entrust-boutique').length) {
									$_elem.data('plugin_storelocator')._geocodeMe(searchTerm, null, _geocodeCallback, _geoCityCallback, false);
								} else {
									//For CQ ENv
									var currentHost = win.location.protocol + '//' + win.location.host;
									win.location = currentHost + _cache.$standaloneTarget + '.html?geoCity=' + encodeURIComponent(_cache.$input.val());
								}
							},
							_geoCityCallback,
							false
					);
				}
			},

			/*******************************************************************************
			 *** ECS V3 @private methods ***
			 ********************************************************************************/
			/* overrided for boutique back button click */
			_ecsBackToBoutiqueSearch = function(e) {
				e.preventDefault();
				_cache.$ecsBoutiqueSearchLocation.removeClass('result');
				_cache.$ecsBoutiqueSearchSeeAll.removeClass('result');
				_cache.$ecsBoutiqueSearchResult.fadeOut();
				_cache.$ecsBoutiqueSearchBg.fadeIn();
				return false;
			},
			/* show google map result */
			_ecsShowResultBox = function() {
				_cache.$ecsBoutiqueSearchResult.fadeIn();
				_cache.$ecsBoutiqueSearchBg.fadeOut();
				_cache.$ecsBoutiqueSearchSeeAll.addClass('result');
				_cache.$ecsBoutiqueSearchSeeAll.css('top', _cache.$ecsBoutiqueSearchResult.height() + 'px');
				_cache.$ecsBoutiqueSearchLocation.addClass('result');
				_cache.$ecsBoutiqueSearchResultLocation.css('display', 'none');
			},
			/*******************************************************************************
			 *** ECS V3 @private methods ***
			 ********************************************************************************/


			/*
          @private method : initialize Autocomplete instances of Search Box inputs for  Store Locator page
          @param : none
        */
			_initializeAutocomplete = function() {
				/* Autocomplete Stuff */
				var autocomplete;
				// Fallback for bounds if not able to find bounds
				var defaultBounds = new google.maps.LatLngBounds(
					new google.maps.LatLng(-33.8902, 151.1759),
					new google.maps.LatLng(-33.8474, 151.2631));

				var options = {
					bounds: defaultBounds,
					types: ['geocode']
				};
				var input = _cache.$input[0];
				//Adding Autocomplete on the input box with option fields

				//Autocomplete for the First input box
				autocomplete = new google.maps.places.Autocomplete(input, options);

				//Listener to call geocodeIt whenever the First input box changes
				google.maps.event.addListener(autocomplete, 'place_changed', function() {

					if (typeof $('.body-wrapper').data('plugin_analytics') !== 'undefined') {
						// GA rules for Boutique Search.
						$('.body-wrapper').data('plugin_analytics').boutiqueSearchGA(_getGeoLocationDetails(autocomplete));
					}

					$_elem.data('plugin_storelocator')
						._geocodeMe(autocomplete, null, _geocodeCallback, _geoCityCallback, false);
				});
			},
			/*
          @private method: _setGeoUrl function for setting the Geocoded Url in storelocator.js and then call _storelocatorAjaxCallHandler.it is called in storelocator.js
          @param : GUrl is the url that needs to be send in the ajax call
        */
			_setGeoUrl = function(GUrl) {
				//To call the _storelocatorAjaxCallhandler is the Geocoding is success and the returned GeoUrl isn't empty
				GUrl !== '' && dataStore.update(GUrl);
			},

			/**
			 * [_getGeoLocationDetails description]
			 * @param  {[type]} autocomplete [description]
			 * @return {[type]}              [description]
			 */
			_getGeoLocationDetails = function(autocomplete) {

				var country, locality, level1, level2, city;

				if (typeof autocomplete !== 'undefined') {
					if (autocomplete.getPlace().address_components.length) {
						$.each(autocomplete.getPlace().address_components, function(index, component) {

							if ($.inArray('country', component.types) === 0) {
								country = component.long_name;
							}

							if ($.inArray('locality', component.types) === 0) {
								locality = component.long_name;
							} else if ($.inArray('administrative_area_level_1', component.types) === 0) {
								level1 = component.long_name;
							} else if ($.inArray('administrative_area_level_2', component.types) === 0) {
								level2 = component.long_name;
							}
						});
					}
				}

				if (typeof locality !== 'undefined') {
					city = locality;
				} else if (typeof level1 !== 'undefined') {
					city = level1;
				} else {
					city = level2;
				}

				return ({
					'country': country,
					'city': city
				});
			},

			/*
        @public Method : initialize the module
        */
			_initialize = function() {
				var parameter = cartier.common.getParameter();
				$_elem = $(_element),
				_options = $.extend({}, defaults, options);
				_cacheObjects();
				// hide errors
				_cache.$errorMsgClass1.hide();
				_cache.$errorMsgClass2.hide();
				// init storelocator plugin
				$_elem.storelocator();
				//subscribe to change message
				_bindEvents();
				_initializeAutocomplete();
				var searchTerm = '';
				if (parameter.geoCity) {
					searchTerm = parameter.geoCity.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
				} else {
					searchTerm = _cache.initLocation;
				}
				if (_cache.$standalone === false) {
					_searchButtonHandler(searchTerm);
				}
			};
		_initialize();
	};
}(window, jQuery, cartier.location));
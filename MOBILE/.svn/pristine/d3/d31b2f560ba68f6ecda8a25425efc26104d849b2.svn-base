/* cartier.productlist.js
 * This file contains functionalities handling the refine search module
 *
 * @project   cartier mobile
 * @date      2014-01-03
 * @author    Sapient 
 * @licensor  cartier mobile
 * @site      cartier mobile
   @dependency cartier.core.js
 * @ NOTE:
    This file has the following sequence of the actions
    1) Declare all the private variables
    2) caching jquery wrapper objects and messages
    $last) call to init() method
 */

;
(function(win, $, productlist, undefined) {
	//this will cause the browser to check for errors more aggressively
	'use strict';

	//check if jquery is defined, else retun
	if (typeof $ === "undefined") {
		console.log("jQuery not found");
		return false;
	}

	/*
        private variables
    */
	var _cache = {},
		_objPropertiesMsg,
		_objPropertiesPth,
		_productPerPage,
		previousFilterStatus = [],
		priceList = [],
		showAllProductList,
		//check page is product list or sub collection
		onProductListPage = true,
		refineSerachedActivated = false,
		maxPriceDefaultOption;


	/*
        @private method : caching jquery objects 
        @param : none 
    */
	var _cacheObjects = function() {

		_cache = {
			$accordionObject: $(".js-accordion"),
			$listOfproducts: $(".js-view-wrapper li"),
			$lazyLoader: $(".js-lazy-load"),
			$viewWrapper: $('.js-view-wrapper'),
			$viewMoreLink: $('.js-view-button'),
			$productFilterForm: $(".js-product-filter"),
			$productListSelectCount: $(".js-product-list__selection-num"),
			$productListing: $(".js-product-list__listing"),
			$showAll: $(".js-show-all"),
			$subCollection: $(".js-subcollection-list"),
			$searchResultPage: $(".js-searchresult-page"),
			$collectionList: $('.collection__listing li'),
			$showAllModels: $('.js-show-all')
		};

	};

	/*
        @private method : binding the event 
        @param : none 
    */
	var _bindEvent = function() {
		var productFilterForm = _cache.$productFilterForm,
			$submitButton = productFilterForm.find("button[type='submit']"),
			$cancelButton = productFilterForm.find("button[type='button']"),
			$radioButton = productFilterForm.find("input[name='fn_radiocategory']");

		// binding function call
		if (!($('.js-searchresult-page').length)) {
			_viewMoreSelection();
		} else {

			var searchGlass = $(".magnify-glass");
			cartier.common.viewmoreSearchResult($('.js-productlist'));
			searchGlass.on('click', _submitFormOnSearchGlassClick);
		}

		_cancelButtonBind($cancelButton);
		_submitButtonBind($submitButton);
		_radioButtonBind($radioButton);
		if (_cache.$showAll.length > 0) {
			_showAllProductBind();
		}
	};

	/*
        @private method : show all product event binding
        @param : none 
    */

	var _showAllProductBind = function() {

		_cache.$showAll.on('click', _showAllProdutcs);
	},
		/*
        @private method : submit form on search glass click
        @param : e -  default event param 
    */
		_submitFormOnSearchGlassClick = function(e) {

			e.preventDefault();
			$(this).closest('form').submit();
		};


	/*
        @private method : view more event binding
        @param : none 
    */
	var _viewMoreSelection = function() {
		_productPerPage = _cache.$viewWrapper.data('maxlimit');
		// if refineSerachedActivated  is false then pass new product list
		if (refineSerachedActivated === false) {

			var newProductList = $(showAllProductList).find('li').clone(true, true);
			// remove exsting elemtn in dom
			newProductList.splice(0, _productPerPage);
			cartier.common.viewMoreSelection(_productPerPage, _cache.$viewMoreLink, _cache.$listOfproducts, newProductList);
		} else {
			cartier.common.viewMoreSelection(_productPerPage, _cache.$viewMoreLink, _cache.$listOfproducts);
		}

	};


	/*
	 *  @private method : bind click event on radio button
	 *  @param : radioButton :- radio button DOM Element
	 */
	var _radioButtonBind = function(radioButton) {

		if (_cache.$searchResultPage.length > 0) {

			radioButton.each(function() {

				var $form = $(this).closest('form');
				$(this).on('click', {
					'form': $form
				}, _submitForm);
			});

		} else {
			radioButton.each(function() {
				$(this).on('click', {
					'eventType': 'radio'
				}, _productListClickHandler);
			});
		}

	};

	/*
	 *  @private method :submit form
	 *  @param : event element in dom
	 */
	var _submitForm = function(event) {
		if (event.data.cancel === "cancelButton") {

			$(this).closest('ul').find('input').prop("checked", false);
			_cache.$accordionObject.data('plugin_makeAccordion')._closeHandler($(this));

		}
		$(event.data.form).submit();
	};

	/*
	 *  @private method : bind clcik event on submit button
	 *  @param : submitButton :- submit DOM Element
	 */
	var _submitButtonBind = function(submitButton) {
		submitButton.each(function() {
			$(this).on('click', {
				'eventType': 'button'
			}, _productListClickHandler);
		});
	};

	/*
	 *  @private method : bind click event on cancel button
	 *  @param : cancelButton :- cancel DOM element
	 */
	var _cancelButtonBind = function(cancelButton) {

		if (_cache.$searchResultPage.length > 0) {
			cancelButton.each(function() {

				var $form = $(this).closest('form');
				$(this).on('click', {
					'form': $form,
					'cancel': "cancelButton"
				}, _submitForm);

			});

		} else {
			cancelButton.each(function() {

				$(this).on('click', _productListCancelHandler);

			});

		}
	};

	/*--------------------------------------------------------------------------------------------------------
                                    HANDLER FUNCTION
    --------------------------------------------------------------------------------------------------------*/

	/*
	 *    @public  method   : cancel handler on refine filters
	 *    @param :  none
	 */
	var _productListCancelHandler = function() {

		if (previousFilterStatus.length === 0) {


			var $checkBoxList = _cache.$productFilterForm.find("input[type='checkbox']");
			$checkBoxList.each(function() {
				$(this).attr('checked', false);
			});
		} else {


			_resetOldFilter();
		}
		_cache.$accordionObject.data('plugin_makeAccordion')._closeHandler($(this));

	};

	/*
        @public  method   :Reset old filter
        @param  none 
    */
	var _resetOldFilter = function() {
		var $inputFiledElement;
		$.each(previousFilterStatus, function(key, value) {
			$inputFiledElement = _cache.$productFilterForm.find("input[value=" + previousFilterStatus[key].inputFiled + "]");
			$inputFiledElement.attr('disabled', previousFilterStatus[key].disabled);
			$inputFiledElement.prop('checked', previousFilterStatus[key].checked);

		});
	};

	/*
        @public  method   :  Refine filter confirm button handler
        @param : event  - event  element 
    */
	var _productListClickHandler = function(event) {

		// prevent default behaviour of submit button
		$(this).addLoader();
		if (event.data.eventType === "button") {
			event.preventDefault();
		} else {
			$(this).attr('disabled', true);
		}

		// remove display none form view more button 
		_cache.$viewMoreLink.css('display', "");
		_productFilter();
		$(this).attr('disabled', false);
		$(this).removeLoader();
		_cache.$accordionObject.data('plugin_makeAccordion')._closeHandler($(this));
		_setFilterList();


	};


	/*
        @private method : initialize Accordion
        @param : none 
    */
	var initializeAccordion = function() {
		_cache.$accordionObject.makeAccordion({
			showBehaviour: true
		});
	};

	/* -------------------------------------------------------------------------------------------------------------
	 *                                  GENERAL FUNCTIONALITY START HERE
	 *-------------------------------------------------------------------------------------------------------------*/

	/*
          @private  method   : set the filter attribute according to new json of a particular categories
          @param :  filterList :- filter list
    */
	var _setFilterInput = function(filterList) {

		var inputFiled,
			productList = _cache.$productListing,
			inputDisabled = true;
		$.each(filterList, function(key, value) {
			inputFiled = filterList[key];

			inputDisabled = (productList.find("." + inputFiled + '.js-inResult')).length > 0 ? false : true;
			var inputFiledElement = _cache.$productFilterForm.find("input[value=" + inputFiled + "]");

			if (inputFiledElement.prop('checked')) {
				inputDisabled = false;
			}
			inputFiledElement.attr('disabled', inputDisabled);
			if (inputDisabled) {
				inputFiledElement.closest('.form-check-2').css('opacity', '0.3');
			} else {
				inputFiledElement.closest('.form-check-2').css('opacity', '1');
			}
			_storeCheckBoxStatus(inputFiled, inputFiledElement.prop('checked'), inputDisabled);

		});
	};

	/*
     *   @private  method   : store check box status for cancel event handler
     *   @param :   inputFiled1 - input filed dom element
                    checked1 - checked or not 
                    disabled1 - disable or not 

    */
	var _storeCheckBoxStatus = function(inputFiled1, checked1, disabled1) {
		var checkBoxState = {};
		checkBoxState.inputFiled = inputFiled1;
		checkBoxState.checked = checked1;
		checkBoxState.disabled = disabled1;
		previousFilterStatus.push(checkBoxState);
	};

	/*
	 *   @private  method   : set filter Attribute
	 *   @param :   none
	 */
	var _setFilterList = function() {

		var $inputFiledElement = _cache.$productFilterForm.find("input[name=fn_category]"),
			filterCaregoryList = [];
		$inputFiledElement.each(function() {
			filterCaregoryList.push($(this).attr('value'));
		});

		_setFilterInput(filterCaregoryList);
	};

	/*
          @private  method   : set the Attribute of given  product element 
          @param :  pageElement :-  product element holder in DOM
                    productDisplayProperty :- product display or not in Dom before on click on view more button
    */
	var _setProductAttribute = function(pageElement, productDisplayProperty) {
		var pageChildElements = $(pageElement).children();

		// caching attribute element of a product
		var productImageUrl = pageChildElements.find("img");
		if (productDisplayProperty === true) {
			productImageUrl.attr("src", productImageUrl.data("linksrc"));
			$(pageElement).removeClass('js-hide-content')
				.removeClass('display-none')
				.addClass('js-in-max-limit  js-inResult');
		} else {

			$(pageElement).removeClass('display-none')
				.addClass('js-hide-content  js-inResult');
		}

	};
	/*
          @private method : prodcut filter 
          @param : none
    */
	var _productFilter = function() {

		var
		radioButtonValue,
			flterClass = ".grid__item",
			maxProduct = $('.js-view-wrapper').data('maxlimit'),
			$inputFiledElement = _cache.$productFilterForm.find("input[name=fn_category]"),
			productList,
			filterResult;
		_productPerPage = _cache.$viewWrapper.data('maxlimit');
			
		var
		numberOfSections = $('.filter_detail').find('.js-accordion__node').length;
		numberOfSections--; //Ignore price filter;


		/*		$($inputFiledElement).each(function() {
			if ($(this).prop('checked') === true) {
				flterClass += "." + $(this).attr('value');
			}
		});
*/

		// adding radio button status in filter class
		radioButtonValue = $(_cache.$productFilterForm.find("input[name=fn_radiocategory]:checked"));
		radioButtonValue = radioButtonValue.attr('value');
		if (radioButtonValue === "false") {
			flterClass += ".js-true";
		}


		if (onProductListPage === true) {
			productList = _cache.$productListing;
		} else {
			refineSerachedActivated = true;
		}
		if (flterClass === "") {
			filterResult = productList.find('li');
		} else {
			filterResult = productList.find(flterClass);


			for (var i = 0; i < numberOfSections; i++) {

				var temp_filter = "";

				$('.filter_detail').find('.js-accordion__node:eq(' + i + ')').find("input[name=fn_category]").each(function() {
					if ($(this).prop('checked') === true) {
						if (temp_filter === "")
							temp_filter += "." + $(this).attr('value');
						else
							temp_filter += ", ." + $(this).attr('value');
					}
				});

				if (temp_filter !== "")
					filterResult = filterResult.filter(temp_filter);
				//debugger;

				console.log(temp_filter);
				console.log(filterResult.length);
			}

		};

		// refine according price list retrun filtered list
		_refineAcordingPrice(filterResult);

		filterResult = productList.find('.js-in-price-result');



		// remove extra class from previous refine 
		if (onProductListPage === true) {
			_resetDom(productList, maxProduct, filterResult.length);
		}

		$.each(filterResult, function(value, obj) {
			$(obj).removeClass('js-not-in-result');

		});


		_displayFilterProductCount(filterResult.length);
		_setProductList(filterResult);

		//reinitialize view more
		_cache.$viewMoreLink.unbind('click');
		cartier.common.viewMoreSelection(_productPerPage, _cache.$viewMoreLink, filterResult);
		_cacheObjects();
	};

	/*
          @private method : refine product in price list
          @param : productList - product list 
    */

	var _refineAcordingPrice = function(newProductList) {

		if (_cache.$productFilterForm.find("select[name='fn_min']").length <= 0 || _cache.$productFilterForm.find("select[name='fn_max']").length <= 0) {
			newProductList.addClass('js-in-price-result');
			return newProductList;
		}

		var minPriceValue = parseInt(_cache.$productFilterForm.find("select[name='fn_min']").val()),
			maxPriceValue = parseInt(_cache.$productFilterForm.find("select[name='fn_max']").val()),

			productIsInFilter = false,
			priceList;

		newProductList.each(function(key, value) {
			productIsInFilter = false;

			// extract price array and convert it into integer
			priceList = $(newProductList[key]).attr('data-price').split(',').map(Number);
			//check product is in selected price range
			productIsInFilter = checkProductInPirceFilter(minPriceValue, maxPriceValue, priceList);
			if (productIsInFilter) {
				$(newProductList[key]).addClass('js-in-price-result');
			}

		});
	};

	/*
          @private method : check min and max price range exist in given price list
          @param : minPrice - min price,
                   maxPrice- max price,
                   priceList - max price
    */
	var checkProductInPirceFilter = function(minPrice, maxPrice, priceList) {
		var productIsInResult = false;
		priceList = priceList.sort();

		$.each(priceList, function(index, val) {
			if (minPrice === -1 && maxPrice !== -1) {
				minPrice = 0.1;
			}


			if ((minPrice <= val && maxPrice >= val) || (minPrice === -1 && maxPrice === -1)) {

				productIsInResult = true;
			}

		});
		return productIsInResult;
	};

	/*
          @private method : display product count after filter result if count is 1 then hide count element
          @param : count - number of product in result
    */
	var _displayFilterProductCount = function(count) {

		if (count > 1) {
			_cache.$productListSelectCount.removeClass("display-none")
				.html(count + " SELECTIONS");
		} else {
			if (count === 0) {
				_cache.$productListSelectCount.removeClass("display-none").html(_objPropertiesMsg.productRefineNoResult);
			} else {
				_cache.$productListSelectCount.addClass('display-none');
			}

		}
	};
	/*
          @private method : reset product list before filtering removing hidden class add js-not-iniresult class
          @param :  productList - list of product
                    maxProduct - max no of product to show on load
                    resultLength - no of product in filter
    */
	var _resetDom = function($productList, maxProduct, resultLength) {
		var i = 0;
		$productList = $($productList).find('li');
		$.each($productList, function(key, obj) {

			if ($(obj).hasClass('display-none') === true) {

				$(obj).addClass('js-not-in-result')
					.removeClass('display-none')
					.removeClass('js-inResult')
					.removeClass('js-in-price-result');

			} else {

				$(obj).addClass('js-not-in-result')
					.removeClass('js-inResult')
					.removeClass('js-in-price-result');
			}

			if (i >= maxProduct || key > resultLength) {
				$(this).addClass('js-hide-content');
			}

			i++;
		});
	};

	/*
	 *    @private  method   : set product content according to the new product list
	 *    @param : productList :- list product exist in JSon file
	 */
	var _setProductList = function(productList) {

		//  maximum no. of product that display first time (before click on view more)
		var maxProduct = $('.js-view-wrapper').data('maxlimit'),

			//product display or not after ajax call
			productDisplayProperty = true;

		// if search result have result less then max product the hide view more button
		if (productList.length <= maxProduct) {
			_cache.$viewMoreLink.addClass('display-none');
		} else {
			_cache.$viewMoreLink.removeClass('display-none');
		}

		//remove existing product if show all functionality needed
		if (onProductListPage === false) {
			_cache.$productListing.empty()
				.append(productList);
		}

		// iterate the product list in json
		$.each(productList, function(key, value) {

			if (key >= maxProduct) {
				productDisplayProperty = false;
			}

			// set the Attribute of current product according new Json Result
			_setProductAttribute(productList[key], productDisplayProperty);

		});

		// hide  extra product from DOM
		if (onProductListPage === true) {
			_removeExtraProduct();
		}


	};

	/*
	 *    @private  method   : hide extra product after refine filter those are not in result
	 *    @param : productListing
	 */
	var _removeExtraProduct = function() {
		var listOfProducts = _cache.$productListing.find('.js-not-in-result');
		$.each(listOfProducts, function(key, value) {

			$(this).removeClass('js-hide-content js-not-in-result')
				.addClass('display-none');

		});
	};

	/*
	 *   @private  method   : set price drop down box
	 *   @param : none
	 */
	var _setPriceList = function() {

		var minPriceDropDown = _cache.$productFilterForm.find("select[name='fn_min']"),
			maxPriceDropDown = _cache.$productFilterForm.find("select[name='fn_max']:last-child"),
			html = "";


		minPriceDropDown.find('option').each(function() {
			priceList.push(parseInt($(this).val()));

		});

		priceList.push(parseInt(maxPriceDropDown.val()));
		minPriceDropDown.on('change', _minPriceChangeHandler);

		maxPriceDefaultOption = _cache.$productFilterForm.find("select[name='fn_max']").find('option').first();
	};

	/*
	 *    @private  method   : max price drop down updated according to min price
	 *    @param :
	 */

	var _minPriceChangeHandler = function() {

		var selectedMax = _cache.$productFilterForm.find("select[name='fn_max']").find('option:selected').val();
		//console.log(selectedMax);
		var maxPriceDropDown = _cache.$productFilterForm.find("select[name='fn_max']"),
			minPriceValue = this.value,
			html = "";
		$.each(priceList, function(key, value) {
			value = parseFloat(value);
			if (value !== -1 && value >= minPriceValue) {


				html += "<option>" + value + "</option>";
			}
		});

		maxPriceDropDown.find('option').remove();
		maxPriceDropDown.append(html);

		if (minPriceValue === "-1") {
			maxPriceDropDown.prepend(maxPriceDefaultOption);
			maxPriceDropDown.find('option').first().attr('selected', 'selected');
		} else {

			var exists = false;
			_cache.$productFilterForm.find("select[name='fn_max']").find('option').each(function() {
				if (this.value === selectedMax) {
					exists = true;
					return false;
				}
			});
			if (exists)
				_cache.$productFilterForm.find("select[name='fn_max']").val(selectedMax);
		}


	};


	/*
        @private method : send ajax call, appends the data to the description
        @param : none 
    */
	var _sendAjaxRequest = function(datatype, requestType, link, pagePath, callback) {

		var objXHR = cartier.ajaxWrapper.getXhrObj({
			type: requestType,
			url: link + '?PagePath=' + pagePath,
			dataType: datatype,
			contentType: "application/x-www-form-urlencoded"
		});
		if (objXHR) {
			objXHR.done(function(data) {
				// handle failure
				if (typeof data.success !== "undefined" && !data.success) {

				} else { // handle success

					callback(data);
				}
			});
		}
		return false;
	};


	/*
     *    @private  method   : display none extra product in list
     *    @param : productList -list of product
                    lastChild-  last child no that exist in dom
    */
	var _removeExtraProduct1 = function(productList, lastChildNo) {

		var list = productList.find('li');
		var sizeOfList = list.length;
		for (var i = lastChildNo; i < sizeOfList; i++) {
			list.splice(i);
		}
		return list;
	};

	/*
	 *    @private  method   : show all product ajax call
	 *    @param : none
	 */
	var _showAllProdutcs = function() {

		// hide show all tab
		var url = location.href;

		if (url.lastIndexOf('showall.html') <= 0) {
			url = url.substring(0, url.lastIndexOf('.html'));
			url += ".showall.html";
		}
		location.href = url;

	};

	/*
	 *    @private  method   :  set price list in dom ,received from ajax call
	 *    @param : none
	 */
	var _setAjaxPriceListInDom = function(data) {

		var data = cartier.common.cartierJSONparser({
			json: data
		});
		if (data !== null) {
			$.each(data, function(key, value) {
				_cache.$viewWrapper.find('.js-' + key).attr('data-price', value);

			});
		}
	};

	/*
	 *    @private  method   :  product price  ajax call
	 *    @param : none
	 */
	var _productPriceAjaxCall = function() {

		var link = _objPropertiesPth.pricePath,

			pagePath = _cache.$productListSelectCount.data('pagepath');
		_sendAjaxRequest('json', 'GET', link, pagePath, _setAjaxPriceListInDom);
	};

	/*
	 *     @private  method   : hide empty refine filter
	 *      @param : none
	 */
	var _hideEmptyFilter = function() {

		_cache.$productFilterForm.find('.js-accordion_node__desc ul').each(function() {
			if ($(this).find('li').length <= 1) {
				$(this).closest('.js-accordion__node').addClass('display-none');
			}
		});
	};

	/*     @private  method   : Ajax call for product price
	 *      @param : none
	 */
	var _productPriceAjaxCall = function() {

		var link = _objPropertiesPth.pricePath,

			pagePath = _cache.$productListSelectCount.data('pagepath');
		_sendAjaxRequest('json', 'GET', link, pagePath, _setAjaxPriceListInDom);
	};


	/*
      @private method : On page load to update collections
      @param : product id
    */
 		var _collectionOnPageLoadCalls = function() {

 			var objXHR = cartier.ajaxWrapper.getXhrObj({
 				type: 'GET',
 				//data: 'path=' + $('#pagePath').val(),
 				url: _objPropertiesPth.collectionJson,
 				dataType: 'json',
 				contentType: "application/x-www-form-urlencoded",
 				async:false
 			});


 			if (objXHR) {
 				objXHR.done(function(data) {
 					// handle failure
 					if (typeof data.success !== "undefined" && !data.success) {
 						// handle redirectURL exist if the session expires
 						// data.redirectURL ?  window.location.href = data.redirectURL : $form.find('.server_message').html(data.errorMessage);
 					} else {
 						var parsedData = cartier.common.cartierJSONparser({
 							json: data
 						});

 						if (parsedData !== false) {

 							var collectionList = $('.collection__listing li'),
 								i=0,
 								model= CQ.I18n.getMessage("model"),
 								models= CQ.I18n.getMessage("models"),
 								sum=0,
								counterToShow=0;


 							$.each(parsedData, function(key, value){
 								//console.log(key);

 								$("." + key).find('.js-count').html(parsedData[key]);
                                value = parseInt(value);
 								sum += parseInt(value);

 								if( value === 1){

 									$("." + key).find('.js-model').html('&nbsp;' + model);
 								}
 								else if( value === 0){
 									if(!$("." + key).hasClass('js-hide-content'))
										counterToShow ++ ;

 									$("." + key).addClass('display-none').remove();
 								}
 								else{
 									$("." + key).find('.js-model').html('&nbsp;' + models);
 								}
 								i++;
 							});

                            var maxCount = $('.js-view-wrapper').data('maxlimit');

							for(var k=0;k<counterToShow;k++){
								$('.js-hide-content:eq(0)').removeClass('js-hide-content');
							}

							 $('.js-view-wrapper-collection img').trigger('appear');



 							_cache.$showAllModels.find('.js-totalcount').html(sum + " ");
                            if(sum > 1)
                                $('.js-totalmodels').text(models);
                            else
                                $('.js-totalmodels').text(model);


                            $('.js-collection-parent, .js-show-all, .js-view-wrapper').removeClass('display-none');
 						}		

 					}
 				}); 	
 			}
 		};


	/*
	 *    @public   method   : initialize all method
	 *    @param : none
	 */
	productlist.init = function() {
		_objPropertiesPth = cartier.properties.paths;
		_objPropertiesMsg = cartier.properties.messages;
		if($('.js-collection').length){
			_cacheObjects();
			_collectionOnPageLoadCalls();
        }
		_cacheObjects();
		_bindEvent();
		initializeAccordion();
		if (_cache.$productFilterForm.length > 0) {
			//_productPriceAjaxCall();
			_setPriceList();
		}
		if (_cache.$searchResultPage.length > 0) {
			_hideEmptyFilter();
		}


	};

}(window, jQuery, cartier.productlist));

/*product  list page js ends here == */